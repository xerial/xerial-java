
# simple selection : person(id, name)

#name.silk
%silk(version:1.0)
%schema person(id:int[key],name)
-person
 -id: 1
 -name: leo
-person
 -id: 2
 -name: yui

--code
person(id, name) in "name.silk" where id = 1
--

# when reading from STDIN, you can omit 'in' statment:
--code
person(id, name) where id = 1
--

# output will be 
-person
 -id: 1
 -name: leo


# phone.silk
-person
 -id: 1
 -phone: xxx-xxxx
-person
 -id: 2 
 -phone: yyy-yyyy

# renaming relations
--code
person(pid, name) as account in "name.silk" where pid = 1
--
# output 
-account
 -pid: 1
 -name: leo



# subtree retrieval


# join
# The update modifies the specified nodes in the input using the enclosed operations:
--code
update person in "name.silk" {
 join _ with "phone.silk" using person.id
}
--

# yielding 
%silk(version:1.0)
%schema p : person(id, name, phone)
-person
 -id: 1
 -name: leo
 -phone: xxx-xxxx
-person
 -id: 2
 -name: yui
 -phone: yyy-yyyy

# You can make explicit what to join:
--code
join 
 person(id, name) in "name.silk" by id, 
 person(id, address) in "phone.silk" by id
--

--code
A = join "name.silk" with "phone.silk" using person.id
B = 

--

%schema: person(id, name, phone)
-person
 -id: 1
 -name: leo
 -phone: xxx-xxxx
-person
 -id: 2
 -name: yui
 -phone: yyy-yyyy


# node renaming
--code
person(id, name) in "name.silk" as employee(ID, full name)
--
%schema employee(ID:int[key], full name)
-employee
 -ID: 1
 -full name: leo
-employee
 -ID: 2
 -full name: yui


# preamble for telling the sort order of the document
# Sorted by the order of person.id of integer type
%sorted by person(id)

# Sorted by the descending order of person.id
%sorted by person(id:desc)

# Sorted by the start value of genes 
%sorted by gene(start)


# name.silk
%schema person(id, name)
%sorted by person(id:int)
-person
 -id: 1
 -name: leo
-person
 -id: 2
 -name: yui

# phone.silk
%schema person(id:int, name)
%sorted by person(id)
-person
 -id: 1
 -phone: xxx-xxxx
-person
 -id: 2 
 -phone: yyy-yyyy


# short hand notation of natural join
--code
join "name.silk" with "phone.silk"
--

# join operations
--code
join
leftjoin
cross
--

# preamble for specifying schema
%schema person(id, name)

%schema person(id, phone)

# for each 
--code
foreach person(id, name) in "name.silk" 
  concat person.* with "\t"
--

# stdin
--code
foreach person(id, name) in _
  concat person.* with "\t"
--

# stdin
--code
foreach person(id, name) 
  concat person.* with "\t"
--



# join using for each
--code
foreach person(id, name) in "name.silk" 
 join _ with person(id, phone) in "phone.silk" using(person.id)

--

# sorting 
--code
sort person(id, name) in "name.silk" by name
--

# numeric sorting
--code
sort person in "name.silk" by person(age)
--


# importing tab-separated data

# tab data (sample.tab)
--code
1	leo
2	yui
--

# rename & load
"sample.tab" as person(id, name) 

%schema: person(id, name)
-person 
 -id: 1
 -name: leo
-person
 -id: 2
 -name: yui

# simple transformation
--code
person(id, name)
--


# pattern match
--code
for each e in "result.silk" {
    e match 
     config => { ... } 
     alignment(name, *) => { ... }
}

--

# set intersection

--code
# dbsnp.txt
-snp(id, chr, start, end)

# 1000genomes-SNV.txt
-snp(id, chr, start, end)


s1 = snp(id, chr, start, end) in "dbsnp.txt"
s2 = snp(id, chr, start, end) in "1000genomes-SNV.txt"

join s1 with s2 where s1(start, end) intersect with s2(start, end)


# s1.join(s2, where:{s1(start, end).intersect_with(s2(start,end))})

-- 


# command-line usage
--code
cat person.tab | silk find -e "person(id, name)"


# change field separator
cat person.csv | silk find -t , -e "person(id,name)"

# filter 
silk find (input file) -e "person(id, name) where person.id = 1"

# join
silk join (input1) (input2) -e "using person.id"

# using full query syntax
silk query -e "join _ with _ using person.id" (input1) (input2)

silk query -e "find person where person.id=1" (input file)

# updating 
silk query -e "update experiment { append $(date) }" (input file)

# generating an alternative structure
cat sample.silk | silk alt 

# compression
silk compress (input file)

# indexing
silk index (input file)



--


-section: Silk Schema

Example
--code
%schema person(id:int[key], name)
%schema class(id:int[key], name, teacher:person, student*:person)

-student|
1	Leo
2	Yui

-teacher|
1	Eli
2	Derek

-class
 -id: 1
 -name: English 
 -teacher(id:1)
 -student(id:1, )

--

